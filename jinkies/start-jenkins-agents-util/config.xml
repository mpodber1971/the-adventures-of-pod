<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <displayName>Start Jenkins Agents</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.plugins.global__variable__string__parameter.GlobalVariableStringParameterDefinition plugin="global-variable-string-parameter@1.2">
          <name>label_build</name>
          <description></description>
          <defaultValue>${jenkslabel_xx}</defaultValue>
        </hudson.plugins.global__variable__string__parameter.GlobalVariableStringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.groovy.SystemGroovy plugin="groovy@2.0">
      <source class="hudson.plugins.groovy.StringSystemScriptSource">
        <script plugin="script-security@1.34">
          <script>import jenkins.model.*
import jenkins.node_monitors.*
import jenkins.slaves.*
import java.util.concurrent.*
import java.util.*
import javax.mail.*
import javax.mail.internet.*
import javax.activation.*

def jenkinsNodes = Jenkins.getInstance().getNodes()

def numberOfflineNodes = 0
def numberConnectingNodes = 0
def numberBusyNodes = 0
def numberIdleNodes = 0
def numberNodes = 0
def labelBuild = build.buildVariableResolver.resolve(&quot;label_build&quot;)
def mailto = &quot;DL-Magento-DevOps-Alerts@magento.com&quot;;
def mailfrom = &quot;noreply@magento.com&quot;;
def mailhost = &quot;smtp.corp.magento.com&quot;;

for (nodes in jenkinsNodes) {
   def computer = nodes.computer
  if (computer == null) {
    sendEmail(mailto,mailfrom,mailhost,labelBuild) 
  }
  else {
   if (nodes.getLabelString()==labelBuild) {
       if (computer.isOnline() &amp;&amp; !computer.isConnecting() &amp;&amp; computer.isIdle()) {
           //  Online / Not Connecting / Idle 
           numberIdleNodes++
           numberNodes++
           println(computer.name + &apos; Idle time: &apos;  + new java.text.DecimalFormat(&quot;0.00&quot;).format(((System.currentTimeMillis() - computer.getIdleStartMilliseconds())/60000)) + &apos; mins&apos;);
       } else if (computer.isConnecting()) {
           // Connecting  
           numberConnectingNodes++
           numberNodes++            
       } else if (computer.isOnline() &amp;&amp; !computer.isConnecting() &amp;&amp; !computer.isIdle()) { 
           // Online / Not Connecting / Busy
           numberBusyNodes++
           numberNodes++
       } else if (computer.isOffline() &amp;&amp; !computer.isConnecting()) {
           // Offline / Not Connecting
           numberOfflineNodes++
           numberNodes++         
           println(computer.name + &apos; Starting offline agent&apos;)
           sleep(500)
   	   computer.connect(false)
       }
    } 
  }
}
println (&quot;Number of Offline Nodes: &quot; + numberOfflineNodes + &quot;/&quot; + numberNodes)
println (&quot;Number of Idle Nodes: &quot; + numberIdleNodes + &quot;/&quot; + numberNodes)
println (&quot;Number of Busy Nodes: &quot; + numberBusyNodes + &quot;/&quot; + numberNodes)
println (&quot;Number of Connecting Nodes: &quot; + numberConnectingNodes + &quot;/&quot; + numberNodes)

//Display the number of offline and online Jenkins slaves


def sendEmail(to,from,host,slavename) { 
      def properties = System.getProperties();
      properties.setProperty(&quot;mail.smtp.host&quot;, host);
      Session session = Session.getDefaultInstance(properties);

      try {
         MimeMessage message = new MimeMessage(session);
         message.setFrom(new InternetAddress(from));
         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
         message.setSubject(&quot;Null slave error on &quot; + build.getEnvironment(listener).get(&quot;JOB_URL&quot;));

         // Now set the actual message
         message.setText(&quot;Null slave object on &quot; + slavename);
         Transport.send(message);
         println(&quot;Null slave error occurred.  Email was sent successfully....&quot;);
      }catch (MessagingException mex) {
         mex.printStackTrace();
      }
   
}</script>
          <sandbox>false</sandbox>
        </script>
      </source>
    </hudson.plugins.groovy.SystemGroovy>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>